// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/template/template.proto

package template

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SemanticService_SearchPaper_FullMethodName = "/template.SemanticService/SearchPaper"
	SemanticService_AddPaper_FullMethodName    = "/template.SemanticService/AddPaper"
)

// SemanticServiceClient is the client API for SemanticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SemanticServiceClient interface {
	SearchPaper(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*PapersResponse, error)
	AddPaper(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
}

type semanticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSemanticServiceClient(cc grpc.ClientConnInterface) SemanticServiceClient {
	return &semanticServiceClient{cc}
}

func (c *semanticServiceClient) SearchPaper(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*PapersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PapersResponse)
	err := c.cc.Invoke(ctx, SemanticService_SearchPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semanticServiceClient) AddPaper(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, SemanticService_AddPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SemanticServiceServer is the server API for SemanticService service.
// All implementations must embed UnimplementedSemanticServiceServer
// for forward compatibility.
type SemanticServiceServer interface {
	SearchPaper(context.Context, *SearchRequest) (*PapersResponse, error)
	AddPaper(context.Context, *AddRequest) (*ErrorResponse, error)
	mustEmbedUnimplementedSemanticServiceServer()
}

// UnimplementedSemanticServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSemanticServiceServer struct{}

func (UnimplementedSemanticServiceServer) SearchPaper(context.Context, *SearchRequest) (*PapersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPaper not implemented")
}
func (UnimplementedSemanticServiceServer) AddPaper(context.Context, *AddRequest) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaper not implemented")
}
func (UnimplementedSemanticServiceServer) mustEmbedUnimplementedSemanticServiceServer() {}
func (UnimplementedSemanticServiceServer) testEmbeddedByValue()                         {}

// UnsafeSemanticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SemanticServiceServer will
// result in compilation errors.
type UnsafeSemanticServiceServer interface {
	mustEmbedUnimplementedSemanticServiceServer()
}

func RegisterSemanticServiceServer(s grpc.ServiceRegistrar, srv SemanticServiceServer) {
	// If the following call pancis, it indicates UnimplementedSemanticServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SemanticService_ServiceDesc, srv)
}

func _SemanticService_SearchPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemanticServiceServer).SearchPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemanticService_SearchPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemanticServiceServer).SearchPaper(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemanticService_AddPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemanticServiceServer).AddPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemanticService_AddPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemanticServiceServer).AddPaper(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SemanticService_ServiceDesc is the grpc.ServiceDesc for SemanticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SemanticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template.SemanticService",
	HandlerType: (*SemanticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchPaper",
			Handler:    _SemanticService_SearchPaper_Handler,
		},
		{
			MethodName: "AddPaper",
			Handler:    _SemanticService_AddPaper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/template/template.proto",
}
